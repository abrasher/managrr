# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

interface AbsPlexDevice {
  clientIdentifier: String!
  connection: [PlexDeviceConnection!]!
  createdAt: DateTime!
  device: String!
  id: String!
  lastSeenAt: DateTime!
  model: String!
  name: String!
  platform: String!
  platformVersion: String!
  product: String!
  productVersion: String!
  provides: String!
  publicAddress: String!
  token: String!
  vendor: String!
  version: String!
}

input AddPlexInstanceInput {
  """Token for the Plex Server"""
  token: String!

  """URL of the Plex Server"""
  url: String!
}

input AddRadarrInstanceInput {
  apiKey: String!
  instanceName: String!
  url: String!
}

enum BlendMode {
  ADD
  DARKEN
  DESTINATION_OVER
  DIFFERENCE
  EXCLUSION
  HARDLIGHT
  LIGHTEN
  MULTIPLY
  OVERLAY
  SCREEN
  SOURCE_OVER
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

enum LibraryType {
  ARTIST
  MOVIE
  PHOTO
  SHOW
}

type Media implements Node {
  id: ID!
  imdbId: String!
  omdbMetadata: OMDbMetadata!
  plexMetadata: [PlexMetadata!]!
  radarrMetadata: RadarrMetadata!
  title: String!
  tmdbMetadata: String!
  type: String!
  year: Float!
}

type Mutation {
  addPlexInstance(input: AddPlexInstanceInput!): PlexInstance!
  addRadarrInstance(input: AddRadarrInstanceInput!): RadarrInstance!
  previewPoster(input: PosterGenerationInput!): String!
  removePlexInstance(input: RemovePlexInstanceInput!): PlexInstance
  removeRadarrInstance(input: RemoveRadarrInstanceInput!): RadarrInstance
  updatePlexInstance(input: UpdatePlexInstanceInput!): PlexInstance
  updateRadarrInstance(input: UpdateRadarrInstanceInput!): RadarrInstance
  updateSettings(input: UpdateSettingsInput!): Settings!
  updateUsers(input: [UpdateUserSharingInput!]!): [PlexUserObject!]!
  upsertPlexInstance(input: UpsertPlexInstanceInput!): PlexInstance!
  upsertRadarrInstance(input: UpsertRadarrInstanceInput!): RadarrInstance!
}

interface Node {
  id: ID!
}

type OMDbMetadata {
  actors: String!
  awards: String!
  boxOffice: String!
  country: String!
  director: String!
  dvd: String!
  imdbRating: Float!
  imdbVotes: Float!
  language: String!
  metascore: Float!
  plot: String!
  poster: String!
  production: String!
  rated: String!
  released: String!
  rottenTomatoesRating: Float
  runtime: String!
  type: String!
  website: String!
  writer: String!
  year: Float!
}

"""Plex Account Model"""
type PlexAccountObject {
  devices: [PlexDevice!]!
  email: String!
  id: ID!
  servers: [PlexDeviceServer!]!
  token: String!
  username: String!
  users: [PlexUserObject!]!
  uuid: String!
}

type PlexDevice implements AbsPlexDevice {
  clientIdentifier: String!
  connection: [PlexDeviceConnection!]!
  createdAt: DateTime!
  device: String!
  id: String!
  lastSeenAt: DateTime!
  model: String!
  name: String!
  platform: String!
  platformVersion: String!
  product: String!
  productVersion: String!
  provides: String!
  publicAddress: String!
  token: String!
  vendor: String!
  version: String!
}

type PlexDeviceConnection {
  uri: String!
}

type PlexDeviceServer implements AbsPlexDevice {
  clientIdentifier: String!
  connection: [PlexDeviceConnection!]!
  createdAt: DateTime!
  device: String!
  id: String!
  lastSeenAt: DateTime!
  libraries: [PlexSharedLibraryObject!]!
  model: String!
  name: String!
  platform: String!
  platformVersion: String!
  product: String!
  productVersion: String!
  provides: String!
  publicAddress: String!
  token: String!
  vendor: String!
  version: String!
}

type PlexInstance implements Node {
  """Server name set by the owner"""
  friendlyName: String!
  id: ID!
  machineIdentifier: String!
  token: String!
  url: String!
}

type PlexMetadata {
  addedAt: DateTime!
  createdAt: DateTime!
  librarySectionID: Float!
  librarySectionKey: String!
  librarySectionTitle: String!
  librarySectionUUID: String!
  originallyAvailableAt: String!
  ratingKey: String!
  thumb: String!
  title: String!
  type: String!
  updatedAt: DateTime!
}

type PlexSharedLibraryObject {
  id: ID!
  key: Float!
  title: String!
  type: LibraryType!
}

type PlexSharedServerObject {
  accepted: Boolean!
  acceptedAt: DateTime!
  allLibraries: Boolean!
  deletedAt: DateTime!
  id: ID!
  inviteToken: String!
  invitedEmail: String!
  invitedId: Float!
  lastSeenAt: DateTime!
  leftAt: DateTime!
  libraries: [PlexSharedLibraryObject!]!
  machineIdentifier: String!
  name: String!
  numLibraries: Float!
  owned: Boolean!
  ownerId: Float!
  pending: Boolean!
  serverId: Float!
}

type PlexUserObject {
  allowCameraUpload: Boolean!
  allowChannels: Boolean!
  allowSubtitleAdmin: Boolean!
  allowSync: Boolean!
  allowTuners: Boolean!
  email: String!
  filterAll: Boolean!
  filterMovies: Boolean!
  filterMusic: Boolean!
  filterPhotos: Boolean!
  filterTelevision: Boolean!
  home: Boolean!
  id: ID!
  protected: Boolean!
  recommendationsPlaylistId: String!
  sharedServers: [PlexSharedServerObject!]!
  thumb: String!
  title: String!
  username: String!
}

input PosterGenerationInput {
  BLEND_MODE: BlendMode
  BOX_COLOUR: String
  DESTINATION_OPACITY: Float
  FONT_COLOUR: String
  GLOBAL_ICON_SCALE: Float
  IMAGE_HEIGHT: Float
  IMAGE_WIDTH: Float
  JPEG_QUALITY: Float
  RATING_BOX_HEIGHT: Float
  RATING_SCALE: Float
  SOURCE_OPACITY: Float
  SPACING: Float
}

type PosterGenerationSettings {
  BLEND_MODE: BlendMode!
  BOX_COLOUR: String!
  DESTINATION_OPACITY: Float!
  FONT_COLOUR: String!
  GLOBAL_ICON_SCALE: Float!
  IMAGE_HEIGHT: Float!
  IMAGE_WIDTH: Float!
  JPEG_QUALITY: Float!
  RATING_SCALE: Float!
  SOURCE_OPACITY: Float!
  SPACING: Float!
}

input PosterGenerationSettingsInput {
  BLEND_MODE: BlendMode!
  BOX_COLOUR: String!
  DESTINATION_OPACITY: Float!
  FONT_COLOUR: String!
  GLOBAL_ICON_SCALE: Float!
  IMAGE_HEIGHT: Float!
  IMAGE_WIDTH: Float!
  JPEG_QUALITY: Float!
  RATING_SCALE: Float!
  SOURCE_OPACITY: Float!
  SPACING: Float!
}

type Query {
  account: PlexAccountObject!
  media: [Media!]!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node!]
  plexInstance(input: WhereInput!): PlexInstance!
  plexInstances: [PlexInstance!]!
  radarrInstance(input: WhereInput!): RadarrInstance!
  radarrInstances: [RadarrInstance!]!
  settings: Settings!
  system: System!
}

type RadarrInstance implements Node {
  apiKey: String!
  id: ID!
  instanceName: String!
  url: String!
}

type RadarrMetadata {
  added: String!
  alternateTitles: [String!]!
  certification: String!
  cleanTitle: String!
  dateAdded: String!
  digitalRelease: String!
  edition: String!
  folderName: String!
  hasFile: Boolean!
  id: Float!
  imdbId: String!
  inCinemas: String!
  indexerFlags: Float!
  isAvailable: Boolean!
  minimumAvailability: String!
  monitored: Boolean!
  originalTitle: String!
  overview: String!
  path: String!
  physicalRelease: String!
  quality: String!
  qualityCutoffNotMet: Boolean!
  qualityProfileId: Float!
  relativePath: String!
  releaseGroup: String
  runtime: Float!
  secondaryYearSourceId: Float!
  size: Float!
  sizeOnDisk: Float!
  sortTitle: String!
  status: String!
  studio: String!
  tags: [String!]
  title: String!
  titleSlug: String!
  tmdbId: Float!
  website: String!
  year: Float!
  youTubeTrailerId: String!
}

input RemovePlexInstanceInput {
  id: ID!
}

input RemoveRadarrInstanceInput {
  id: ID!
}

input RunTaskInput {
  taskName: TaskName!
}

type Settings implements Node {
  apiKey: String!
  id: ID!
  language: String!
  omdbKey: String
  password: String!
  plexAccountToken: String
  port: Float!
  posterSettings: PosterGenerationSettings!
  tmdbKey: String
}

type System {
  tasks: [Task!]!
  version: String!
}

type TMDBMetadata {
  adult: Boolean!
  backdrop_path: String!
  budget: Float!
  genres: [String!]!
  homepage: String!
  id: Float!
  imdb_id: String!
  original_language: String!
  original_title: String!
  overview: String!
  popularity: Float!
  poster_path: String!
  production_companies_names: [String!]!
  production_countries_iso: [String!]!
  release_date: String!
  revenue: Float!
  runtime: Float!
  spoken_languages_iso: [String!]!
  status: String!
  tagline: String!
  title: String!
  video: Boolean!
  vote_average: Float!
  vote_count: Float!
}

type Task {
  completed: Float
  name: TaskName!
  started: Float
  status: TaskStatus!
}

enum TaskName {
  importer
  restore_poster
  thumbnail_generate
}

enum TaskStatus {
  errored
  finished
  not_started
  running
}

input UpdatePlexInstanceInput {
  id: ID!
  port: Float!
  token: String!
  url: String!
}

input UpdateRadarrInstanceInput {
  apiKey: String!
  id: ID!
  instanceName: String!
  url: String!
}

input UpdateSettingsInput {
  language: String
  plexAccountToken: String
  port: Float
  posterSettings: PosterGenerationSettingsInput
}

input UpdateUserSharedServerInput {
  allLibraries: Boolean!
  librarySectionIds: [ID!]!
  machineIdentifier: String!
}

input UpdateUserSharingInput {
  """Plex User ID"""
  id: ID!
  servers: [UpdateUserSharedServerInput!]!
}

input UpsertPlexInstanceInput {
  id: ID

  """Token for the Plex Server"""
  token: String!

  """URL of the Plex Server"""
  url: String!
}

input UpsertRadarrInstanceInput {
  apiKey: String!
  id: ID
  instanceName: String!
  url: String!
}

input WhereInput {
  id: String!
}
