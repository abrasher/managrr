generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:managrr.db"
}

model Settings {
  id               Int              @id @default(autoincrement())
  language         String           @default("english")
  port             Int              @default(4000)
  plexAccountToken String           @default("")
  plex             PlexSettings[]
  SonarrSettings   SonarrSettings[]
  RadarrSettings   RadarrSettings[]
}

model PlexSettings {
  id                Int      @id @default(autoincrement())
  friendlyName      String   @default("")
  machineIdentifier String   @default("")
  url               String   @unique
  token             String
  settings          Settings @relation(fields: [settingsId], references: [id])
  settingsId        Int
}

model SonarrSettings {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  url        String   @unique
  apiKey     String
  settings   Settings @relation(fields: [settingsId], references: [id])
  settingsId Int
}

model RadarrSettings {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  url        String   @unique
  apiKey     String   @unique
  settings   Settings @relation(fields: [settingsId], references: [id])
  settingsId Int
}

model PlexCollection {
  ratingKey           Int     @id
  guid                String  @unique
  title               String
  librarySectionTitle String
  mode                String
  order               String
  contentRating       String
  summary             String
  movies              Movie[]
}

model PlexServer {
  id                Int          @id @default(autoincrement())
  friendlyName      String       @default("")
  machineIdentifier String       @default("")
  url               String       @unique
  token             String
  library           PlexLibrary?
}

model PlexLibrary {
  id         Int           @id @default(autoincrement())
  sections   PlexSection[]
  plexServer PlexServer    @relation(fields: [serverId], references: [id])
  serverId   Int
}

model PlexSection {
  id            Int          @id @default(autoincrement())
  allowSync     Boolean
  refreshing    Boolean
  key           Int
  type          String
  agent         String
  scanner       String
  language      String
  title         String
  uuid          String       @unique
  library       PlexLibrary? @relation(fields: [plexLibraryId], references: [id])
  plexLibraryId Int?
  movies        Movie[]
}

model PlexMedia {
  ratingKey      Int             @id
  key            String
  studio         String?
  type           String
  title          String
  contentRating  String?
  summary        String
  rating         Decimal?
  audienceRating Decimal?
  year           Int
  tagline        String?
  duration       Int
  genres         Genre[]
  // director Director
  // writes Writers[]
  // producers Producer[]
  // countries Country[]
  imdbId         Int
  tmdbId         Int
  tvdbId         Int?
  mediaFiles     PlexMediaFile[]
}

model PlexMediaFile {
  id           Int                 @id
  duration     Int?
  bitrate      Int?
  width        Int?
  height       Int?
  mediaPart    PlexMediaFilePart[]
  plexMedia    PlexMedia?          @relation(fields: [plexMediaKey], references: [ratingKey])
  plexMediaKey Int?
}

model PlexMediaFilePart {
  id              Int            @id
  file            String
  size            Int
  container       String?
  plexMediaFile   PlexMediaFile? @relation(fields: [plexMediaFileId], references: [id])
  plexMediaFileId Int?
}

model Genre {
  id        Int         @id @default(autoincrement())
  name      String
  movies    Movie[]
  // shows     Show[]
  plexId    Int
  radarrId  Int
  plexMedia PlexMedia[]
}

model RadarrMovie {
  id                     Int                    @id
  title                  String
  originalTitle          String
  alternateTitles        RadarrAlternateTitle[]
  secondaryYear          Int?
  secondaryYearSourceId  Int?
  sortTitle              String
  sizeOnDisk             Float
  status                 String // ENUM TYPE
  overview               String
  inCinemas              DateTime?
  physicalRelease        DateTime?
  digitalRelease         DateTime?
  images                 RadarrImage[]
  website                String
  year                   Int
  hasFile                Boolean
  youTubeTrailerId       String
  studio                 String
  path                   String
  monitored              Boolean
  minimumAvailability    String
  isAvailable            Boolean
  folderName             String
  runtime                Int
  cleanTitle             String
  imdbId                 String?
  tmdbId                 Int
  titleSlug              String
  certification          String?
  qualityProfile         RadarrQualityProfile   @relation(fields: [radarrQualityProfileId], references: [id])
  genres                 RadarrGenre[]
  tags                   RadarrTag[]
  added                  DateTime
  ratings                RadarrRating?
  movieFile              RadarrMovieFile?
  collection             RadarrCollection?      @relation(fields: [radarrCollectionTmdbId], references: [id])
  radarrCollectionTmdbId String?
  radarrQualityProfileId Int

  @@unique([title, year])
}

model RadarrAlternateTitle {
  id         Int
  sourceType String
  title      String
  sourceId   Int
  votes      Int
  voteCount  Int
  language   RadarrLanguage? @relation(fields: [languageId], references: [id])
  languageId Int?
  movie      RadarrMovie     @relation(fields: [movieId], references: [id])
  movieId    Int

  @@id([id, movieId])
}

model RadarrMovieFile {
  id                  Int              @id
  relativePath        String
  path                String
  size                Float
  dateAdded           DateTime
  indexerFlags        Int
  quality             String
  qualityCutoffNotMet Boolean
  edition             String
  releaseGroup        String?
  languages           RadarrLanguage[]
  sceneName           String?
  originalFilePath    String?
  mediaInfo           RadarrMediaInfo?
  movie               RadarrMovie      @relation(fields: [movieId], references: [id])
  movieId             Int
}

model RadarrMediaInfo {
  id                      Int             @id @default(autoincrement())
  audioAdditionalFeatures String
  audioBitrate            Float
  audioChannels           Float
  audioCodec              String
  audioLanguages          String
  audioStreamCount        Float
  videoCodec              String
  videoBitDepth           Float
  videoBitrate            Float
  videoFps                Float
  resolution              String
  runTime                 String
  scanType                String
  subtitles               String
  movieFile               RadarrMovieFile @relation(fields: [movieFileId], references: [id])
  movieFileId             Int

}

model RadarrImage {
  coverType String
  url       String
  remoteUrl String

  movie   RadarrMovie @relation(fields: [movieId], references: [id])
  movieId Int
  @@id([coverType, url])
}

model RadarrLanguage {
  id                Int                    @id
  name              String                 @unique
  alternativeTitles RadarrAlternateTitle[] @relation
  movieFiles        RadarrMovieFile[]
}

model RadarrRating {
  id      Int          @id @default(autoincrement())
  votes   Int
  value   Float
  movie   RadarrMovie? @relation(fields: [movieId], references: [id])
  movieId Int?
}

model RadarrQuality {
  id         Int    @id
  name       String
  source     String
  resolution Int
  modifier   String
}

model RadarrQualityProfile {
  id     Int           @id
  name   String
  movies RadarrMovie[]
}

model RadarrTag {
  id     Int           @id
  label  String        @unique
  movies RadarrMovie[]
}

model RadarrGenre {
  id     Int           @id @default(autoincrement())
  name   String        @unique
  movies RadarrMovie[]
}

model RadarrCollection {
  id     String        @id @default(uuid())
  name   String
  tmdbId Int
  movie  RadarrMovie[]
}

model Person {
  id    Int            @id @default(autoincrement())
  name  String
  age   Int
  roles RolesInMovie[]
}

model Country {
  id     Int     @id @default(autoincrement())
  name   String
  code   String
  movies Movie[]
}

model RolesInMovie {
  person   Person @relation(fields: [personId], references: [id])
  personId Int
  // Role is star, writer, producer
  role     String
  movie    Movie  @relation(fields: [movieId], references: [id])
  movieId  Int

  @@id([personId, movieId, role])
}

model Movie {
  id              Int              @id @default(autoincrement())
  tmdbId          Int
  imdbId          Int
  title           String
  year            Int
  duration        Int
  studio          String
  contentRating   String
  imdbRating      Decimal
  tmdbRating      Decimal
  rtRatings       Decimal
  files           MovieFile[]
  genres          Genre[]
  roles           RolesInMovie[]
  countries       Country[]
  plexSections    PlexSection[]
  plexCollections PlexCollection[]
}

model MovieFile {
  id             Int     @id
  radarrInstance String?
  monitored      String?
  path           String?
  size           Int?
  movie          Movie   @relation(fields: [movieId], references: [id])
  movieId        Int
}

// model PlexCollection {

// }

// model RadarrInstance {

// }

// model Show {
//   id            Int     @id @default(autoincrement())
//   title         String
//   year          Int
//   network       String
//   contentRating String
//   imdbRating    Decimal
//   tmdbRating    Decimal
//   rtRatings     Decimal
//   genres        Genre[]
//   roles
// }
